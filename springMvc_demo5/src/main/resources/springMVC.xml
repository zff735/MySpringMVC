<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context  http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">
    <!--    开启注解扫描-->
    <context:component-scan base-package="com.atguigu"></context:component-scan>
    <!-- 配置Thymeleaf视图解析器 -->
    <bean id="viewResolver" class="org.thymeleaf.spring5.view.ThymeleafViewResolver">
        <!--配置视图解析器的优先级，这说明可以有多个视图解析器-->
        <property name="order" value="1"/>
        <property name="characterEncoding" value="UTF-8"/>
        <property name="templateEngine">
            <bean class="org.thymeleaf.spring5.SpringTemplateEngine">
                <property name="templateResolver">
                    <bean class="org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver">

                        <!-- 视图前缀 -->
                        <property name="prefix" value="/WEB-INF/templates/"/>

                        <!-- 视图后缀 -->
                        <property name="suffix" value=".html"/>
                        <property name="templateMode" value="HTML5"/>
                        <property name="characterEncoding" value="UTF-8" />
                    </bean>
                </property>
            </bean>
        </property>
    </bean>

    <!--必须通过文件解析器的解析才能将文件转换为MultipartFile对象,该对象在ioc中通过id来匹配,所以一定要设置id-->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"></bean>

    <mvc:view-controller path="/" view-name="index"></mvc:view-controller>
    <!--    <mvc:resources location="/static/" mapping="/static/**"/>-->
    <!--    若有静态资源需要访问,则要配置该标签-->
    <!--    先有springMVC进行处理,找不到在有默认的servlet来找-->
    <mvc:default-servlet-handler></mvc:default-servlet-handler>
    <mvc:annotation-driven></mvc:annotation-driven>

<!--    配置拦截器-->
<!--    这两种默认拦截所有请求-->
<!--    <ref bean="firstInterceptor"></ref>-->
<!--    <bean class="com.atguigu.springmvc.interceptor.FirstInterceptor"></bean>-->
<!--这种方法可以自定义拦截路径-->
    <mvc:interceptors>
        <mvc:interceptor>
<!--            拦截的路径,/*表示所有一层访问地址的请求,/**表示所有访问请求-->
            <mvc:mapping path="/*"/>
<!--            排除那些请求被拦截-->
            <mvc:exclude-mapping path="/"/>
<!--            用那个拦截器拦截-->
            <ref bean="firstInterceptor"></ref>
        </mvc:interceptor>
    </mvc:interceptors>

<!--    xml配置自定义异常处理器-->
    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionMappings">
            <props>
<!--                key为异常类型(用全类名),中间的value标识要跳转到的页面,也是由解析器来处理的-->
                <prop key="java.lang.ArithmeticException">error</prop>
            </props>
        </property>
<!--        将出现的异常信息在请求域中共享-->
        <property name="exceptionAttribute" value="ex"></property>
    </bean>

</beans>